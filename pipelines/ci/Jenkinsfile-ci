pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'seograth/python-app'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Pull Git Commit Hash') {
            steps {
                script {
                    env.VERSION_TAG = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    echo "Git Commit Hash: ${env.VERSION_TAG}"
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                sh '''
                    docker build -t ${DOCKER_IMAGE}:${VERSION_TAG} .
                '''
            }
        }
        stage('Scan Docker Image for Vulnerabilities') {
            steps {
                script {
                    // You can integrate Trivy or other scanning tools here
                    sh """
                        trivy image ${DOCKER_IMAGE}:${VERSION_TAG} || echo 'Vulnerability scan failed or found issues!'
                    """
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials-id', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh '''
                        echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
                        docker push ${DOCKER_IMAGE}:${VERSION_TAG}
                        docker logout
                    '''
                }
            }
        }
    }

    post {
         success {
            echo "Docker image ${DOCKER_IMAGE}:${VERSION_TAG} pushed successfully!"
        }
        failure {
            echo "Pipeline failed. Check logs for details."
        }
        always {
            cleanWs()  // Clean up the workspace after the build
        }
    }
}